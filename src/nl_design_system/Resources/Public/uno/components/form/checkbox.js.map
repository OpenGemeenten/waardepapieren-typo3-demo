{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../../../../../src/components/form/checkbox.ts"],"names":["CheckboxGroup","CheckboxGroup.constructor","CheckboxGroup.destroy","CheckboxGroup.handleEvent","CheckboxGroup.onListCheckboxClick","CheckboxGroup.onTableCheckboxClick"],"mappings":"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","sourcesContent":["import '../../core/polyfills';\n\n/**\n * @class CheckboxGroup\n * Adds support for grouped checkboxes in tables or lists\n * Usage:\n * System.import('/node_modules/uno/dist/components/form/checkbox.js').then(function (module) {\n *    var checkboxGroup = document.getElementById('table_nested');\n *    new module.CheckboxGroup(checkboxGroup);\n * });\n */\nexport class CheckboxGroup implements EventListenerObject {\n\n    constructor(private container: Element) {\n        if (this.container.nodeName.toLowerCase() === 'ul' || this.container.nodeName.toLowerCase() === 'table') {\n            let checkboxes: any = this.container.querySelectorAll('.input__control--checkbox');\n\n            checkboxes.forEach((checkbox: HTMLInputElement) => {\n                checkbox.addEventListener('click', this);\n            });\n        } else {\n            throw new Error(`Incompatible element passed, expected <ul> or <table>, got ${this.container.nodeName}`);\n        }\n    }\n\n    public destroy(): void {\n        let checkboxes: any = this.container.querySelectorAll('.input__control--checkbox');\n        checkboxes.forEach((checkbox: HTMLInputElement) => {\n            checkbox.removeEventListener('click', this);\n        });\n    }\n\n    handleEvent(evt: Event): void {\n        if (evt.type === 'click') {\n            const parent: HTMLElement = (evt.currentTarget as HTMLElement).parentElement;\n            if (parent.nodeName.toLowerCase() === 'li') {\n                // List mode\n                this.onListCheckboxClick(evt.currentTarget as HTMLInputElement);\n            } else {\n                // Table mode\n                this.onTableCheckboxClick(evt.currentTarget as HTMLInputElement);\n            }\n        }\n    }\n\n    private onListCheckboxClick(checkbox: HTMLInputElement): void {\n        let parent: HTMLElement = checkbox.parentElement;\n        if (parent.classList.contains('input__group--checkbox')) {\n            // group checkbox\n            const ul: Element = parent.querySelector('ul');\n\n            if (ul) {\n                const checkboxes: any = ul.querySelectorAll('.input__control--checkbox');\n                checkboxes.forEach((child: HTMLInputElement) => child.checked = checkbox.checked);\n            }\n        } else {\n            // child checkbox\n            while (parent && !parent.classList.contains('input__group')) {\n                parent = parent.parentNode as HTMLElement;\n            }\n\n            if (parent) {\n                const ul: Element = parent.querySelector('ul');\n                const parentCheckbox: HTMLInputElement = parent.querySelector('.input__control--checkbox') as HTMLInputElement;\n                const checkboxesLength: number = ul.querySelectorAll('.input__control--checkbox').length;\n                const checkedCount: number = ul.querySelectorAll('.input__control--checkbox:checked').length;\n\n                parentCheckbox.checked = checkedCount > 0;\n                parentCheckbox.indeterminate = checkedCount > 0 && checkedCount < checkboxesLength;\n            }\n        }\n    }\n\n    private onTableCheckboxClick(checkbox: HTMLInputElement): void {\n        let table: HTMLElement = checkbox.parentElement;\n        while (table && table.nodeName.toLowerCase() !== 'table') {\n            table = table.parentNode as HTMLElement;\n        }\n        const checkboxes: any = table.querySelectorAll('.input__control--checkbox');\n        if (table.querySelector('.input__control--checkbox') === checkbox) {\n            // Group checkbox item\n            checkboxes.forEach((child: HTMLInputElement, idx: number) => {\n                // Skip first item, that's the group checkbox\n                if (idx > 0) {\n                    child.checked = checkbox.checked;\n                }\n            });\n        } else {\n            // Child checkbox\n            const checkboxesLength: number = checkboxes.length - 1;\n            let checkedCount: number = table.querySelectorAll('tbody .input__control--checkbox:checked').length;\n\n            checkboxes.item(0).checked = checkedCount > 0;\n            checkboxes.item(0).indeterminate = checkedCount > 0 && checkedCount < checkboxesLength;\n        }\n    }\n\n}\n"]}