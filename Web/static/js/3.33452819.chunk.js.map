{"version":3,"sources":["../node_modules/node-fetch/browser.js"],"names":["global","self","window","Error","getGlobal","module","exports","fetch","default","bind","Headers","Request","Response"],"mappings":"wHAGA,IAUIA,EAVY,WAIf,GAAoB,qBAATC,KAAwB,OAAOA,KAC1C,GAAsB,qBAAXC,OAA0B,OAAOA,OAC5C,GAAsB,qBAAXF,EAA0B,OAAOA,EAC5C,MAAM,IAAIG,MAAM,kCAGJC,GAEbC,EAAOC,QAAUA,EAAUN,EAAOO,MAGlCD,EAAQE,QAAUR,EAAOO,MAAME,KAAKT,GAEpCM,EAAQI,QAAUV,EAAOU,QACzBJ,EAAQK,QAAUX,EAAOW,QACzBL,EAAQM,SAAWZ,EAAOY","file":"static/js/3.33452819.chunk.js","sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":""}